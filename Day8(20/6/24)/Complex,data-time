-- Create database
CREATE DATABASE hospital;
USE hospital;

-- Departments - did, dname
CREATE TABLE departments (
    did INT PRIMARY KEY,
    dname VARCHAR(50) NOT NULL
);

-- Doctors - doc_id, doc_name, dept_id (foreign key to departments)
CREATE TABLE doctors (
    doc_id INT PRIMARY KEY,
    doc_name VARCHAR(50) NOT NULL,
    dept_id INT,
    FOREIGN KEY(dept_id) REFERENCES departments(did)
);

-- Patients - pat_id, pat_name, age, address
CREATE TABLE patients (
    pat_id INT PRIMARY KEY,
    pat_name VARCHAR(50) NOT NULL,
    age INT,
    address VARCHAR(100)
);

-- Appointments - app_id, pat_id (foreign key to patients), doc_id (foreign key to doctors), date, time
CREATE TABLE appointments (
    app_id INT PRIMARY KEY,
    pat_id INT,
    doc_id INT,
    date DATE,
    time TIME,
    FOREIGN KEY(pat_id) REFERENCES patients(pat_id),
    FOREIGN KEY(doc_id) REFERENCES doctors(doc_id)
);

-- Bills - bill_id, app_id (foreign key to appointments), amount, status, mode (cash, card, insurance)
CREATE TABLE bills (
    bill_id INT PRIMARY KEY,
    app_id INT,
    amount DECIMAL(10, 2),
    status VARCHAR(30),
    mode VARCHAR(30) CHECK(mode IN ('cash', 'card', 'insurance')),
    timestamp TIMESTAMP,
    FOREIGN KEY(app_id) REFERENCES appointments(app_id)
);

-- Inserting values into departments table
INSERT INTO departments VALUES (1, 'Cardiology');
INSERT INTO departments VALUES (2, 'Neurology');
INSERT INTO departments VALUES (3, 'Orthopedics');
INSERT INTO departments VALUES (4, 'Pediatrics');

-- Inserting values into doctors table
INSERT INTO doctors VALUES (101, 'Dr. Smith', 1);
INSERT INTO doctors VALUES (102, 'Dr. John', 2);
INSERT INTO doctors VALUES (103, 'Dr. Adams', 3);
INSERT INTO doctors VALUES (104, 'Dr. Brown', 4);

-- Inserting values into patients table
INSERT INTO patients VALUES (201, 'Alice', 30, '123 Main St');
INSERT INTO patients VALUES (202, 'Bob', 45, '456 Oak St');
INSERT INTO patients VALUES (203, 'Charlie', 55, '789 Pine St');
INSERT INTO patients VALUES (204, 'David', 25, '321 Maple St');
INSERT INTO patients VALUES (205, 'Eve', 35, '654 Cedar St');

-- Inserting values into appointments table
INSERT INTO appointments VALUES (301, 201, 101, '2024-06-01', '10:00:00');
INSERT INTO appointments VALUES (302, 202, 102, '2024-06-02', '11:00:00');
INSERT INTO appointments VALUES (303, 203, 103, '2024-06-03', '12:00:00');
INSERT INTO appointments VALUES (304, 204, 104, '2024-06-04', '09:00:00');

-- Inserting values into bills table
INSERT INTO bills VALUES (401, 301, 200.00, 'paid', 'cash', '2024-06-01 10:30:00');
INSERT INTO bills VALUES (402, 302, 300.00, 'paid', 'card', '2024-06-02 11:30:00');
INSERT INTO bills VALUES (403, 303, 150.00, 'pending', 'insurance', '2024-06-03 12:30:00');

-- SUBQUERIES
-- SINGLE ROW SUBQUERIES
-- Example 1: Find the patient who had the most expensive appointment bill
SELECT pat_name 
FROM patients 
WHERE pat_id = (
    SELECT pat_id 
    FROM appointments 
    WHERE app_id = (
        SELECT app_id 
        FROM bills 
        ORDER BY amount DESC 
        LIMIT 1
    )
);

-- Example 2: Find the department with the most doctors
SELECT dname 
FROM departments 
WHERE did = (
    SELECT dept_id 
    FROM doctors 
    GROUP BY dept_id 
    ORDER BY COUNT(doc_id) DESC 
    LIMIT 1
);

-- MULTIPLE-ROW SUBQUERIES
-- Example 1: Find all patients who have appointments
SELECT pat_name 
FROM patients 
WHERE pat_id IN (
    SELECT pat_id 
    FROM appointments
);

-- Example 2: Find all patients who have appointments with doctors from the Cardiology department
SELECT pat_name 
FROM patients 
WHERE pat_id IN (
    SELECT pat_id 
    FROM appointments 
    WHERE doc_id IN (
        SELECT doc_id 
        FROM doctors 
        WHERE dept_id = (
            SELECT did 
            FROM departments 
            WHERE dname = 'Cardiology'
        )
    )
);

-- CORRELATED SUBQUERIES
-- Example 1: Find doctors who have appointments with patients older than the average patient age in their department
SELECT doc_name 
FROM doctors d 
WHERE EXISTS (
    SELECT 1 
    FROM appointments a 
    JOIN patients p ON a.pat_id = p.pat_id 
    WHERE a.doc_id = d.doc_id 
    AND p.age > (
        SELECT AVG(age) 
        FROM patients 
        WHERE pat_id IN (
            SELECT pat_id 
            FROM appointments 
            WHERE doc_id IN (
                SELECT doc_id 
                FROM doctors 
                WHERE dept_id = d.dept_id
            )
        )
    )
);

-- Example 2: Find patients with bills higher than the average bill amount
SELECT pat_name 
FROM patients p 
WHERE EXISTS (
    SELECT 1 
    FROM appointments a 
    JOIN bills b ON a.app_id = b.app_id 
    WHERE a.pat_id = p.pat_id 
    AND b.amount > (
        SELECT AVG(amount) 
        FROM bills
    )
);

-- JOINS
-- Example 1: INNER JOIN with subquery - Retrieve patients with their appointment details where the bill amount is greater than 200
SELECT p.pat_name, a.date, a.time, b.amount 
FROM patients p 
INNER JOIN appointments a ON p.pat_id = a.pat_id 
INNER JOIN (
    SELECT * 
    FROM bills 
    WHERE amount > 200
) b ON a.app_id = b.app_id;

-- Example 2: LEFT JOIN with aggregate functions - Retrieve all doctors and the total amount of bills for their appointments, even if there are no bills
SELECT d.doc_name, SUM(b.amount) AS total_bill_amount 
FROM doctors d 
LEFT JOIN appointments a ON d.doc_id = a.doc_id 
LEFT JOIN bills b ON a.app_id = b.app_id 
GROUP BY d.doc_name;

-- Example 3: RIGHT JOIN with date and time functions - Retrieve all bills and their corresponding appointment details, even if there is no appointment
SELECT b.bill_id, b.amount, a.date, a.time 
FROM bills b 
RIGHT JOIN appointments a ON b.app_id = a.app_id;

-- ADVANCED FUNCTIONS
-- 1. RANK
-- Example: Display rank of doctors based on the total bill amount of their appointments using RANK() function
SELECT d.doc_name, SUM(b.amount) AS total_bill_amount, 
       RANK() OVER (ORDER BY SUM(b.amount) DESC) AS rank 
FROM doctors d 
LEFT JOIN appointments a ON d.doc_id = a.doc_id 
LEFT JOIN bills b ON a.app_id = b.app_id 
GROUP BY d.doc_name;

-- 2. DENSE_RANK
-- Example: Display dense rank of doctors based on the total bill amount of their appointments using DENSE_RANK() function
SELECT d.doc_name, SUM(b.amount) AS total_bill_amount, 
       DENSE_RANK() OVER (ORDER BY SUM(b.amount) DESC) AS dense_rank 
FROM doctors d 
LEFT JOIN appointments a ON d.doc_id = a.doc_id 
LEFT JOIN bills b ON a.app_id = b.app_id 
GROUP BY d.doc_name;

-- 3. ROW_NUMBER
-- Example: Assign unique row number to each patient based on their age using ROW_NUMBER() function
SELECT ROW_NUMBER() OVER (ORDER BY age DESC) AS row_num, pat_name, age 
FROM patients;

-- 4. CUME_DIST
-- Example: Find cumulative distribution of bills based on amount
SELECT bill_id, amount, 
       CUME_DIST() OVER (ORDER BY amount) AS cumulative_distribution 
FROM bills;

-- 5. LAG
-- Example: Find lag of bill amount from bills table
SELECT bill_id, amount, 
       LAG(amount) OVER (ORDER BY amount) AS lag_amount 
FROM bills;

-- 6. LEAD
-- Example: Find lead amount of the bills from bills table
SELECT bill_id, amount, 
       LEAD(amount) OVER (ORDER BY amount) AS lead_amount 
FROM bills;


-- SUBQUERIES
-- Question 1: Find the name of the patient who had the appointment with the highest total bill amount.
SELECT pat_name 
FROM patients 
WHERE pat_id = (
    SELECT pat_id 
    FROM appointments 
    WHERE app_id = (
        SELECT app_id 
        FROM bills 
        ORDER BY amount DESC 
        LIMIT 1
    )
);

-- Question 2: Retrieve the names of all patients who have appointments with doctors from the same department as "Dr. John".
SELECT pat_name 
FROM patients 
WHERE pat_id IN (
    SELECT DISTINCT pat_id 
    FROM appointments 
    WHERE doc_id IN (
        SELECT doc_id 
        FROM doctors 
        WHERE dept_id = (
            SELECT dept_id 
            FROM doctors 
            WHERE doc_name = 'Dr. John'
        )
    )
);

-- JOINS
-- Question 1: List the doctors and the total bill amount of their appointments, including doctors with no appointments.
SELECT d.doc_name, COALESCE(SUM(b.amount), 0) AS total_bill_amount 
FROM doctors d 
LEFT JOIN appointments a ON d.doc_id = a.doc_id 
LEFT JOIN bills b ON a.app_id = b.app_id 
GROUP BY d.doc_name;

-- Question 2: Retrieve the patient names and their appointment details for all appointments with bills paid via "insurance".
SELECT p.pat_name, a.date, a.time 
FROM patients p 
JOIN appointments a ON p.pat_id = a.pat_id 
JOIN bills b ON a.app_id = b.app_id 
WHERE b.mode = 'insurance';
